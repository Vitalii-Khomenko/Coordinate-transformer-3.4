// Coordinate transformation functions (all comments in English)

// SWEREF99 18 00 (EPSG:3011) to WGS84 (EPSG:4326) - Built-in Mathematical Implementation
function sweref99ToWGS84(easting, northing) {
    // SWEREF99 18 00 parameters (EPSG:3011)
    var a = 6378137.0;              // Semi-major axis (GRS80)
    var f = 1 / 298.257222101;      // Flattening (GRS80)
    var lat0 = 0.0;                 // Latitude of natural origin (degrees)
    var lon0 = 18.0;                // Longitude of natural origin (degrees)
    var k0 = 1.0;                   // Scale factor at natural origin
    var x0 = 150000.0;              // False easting (meters)
    var y0 = 0.0;                   // False northing (meters)
    
    // Convert to radians
    var DEG_TO_RAD = Math.PI / 180.0;
    var RAD_TO_DEG = 180.0 / Math.PI;
    
    lat0 *= DEG_TO_RAD;
    lon0 *= DEG_TO_RAD;
    
    // Derived constants
    var b = a * (1 - f);           // Semi-minor axis
    var e2 = 2 * f - f * f;        // First eccentricity squared
    var e = Math.sqrt(e2);         // First eccentricity
    var e1 = (1 - Math.sqrt(1 - e2)) / (1 + Math.sqrt(1 - e2));
    
    // Remove false easting and northing
    var x = easting - x0;
    var y = northing - y0;
    
    // Calculate meridional arc
    var M0 = 0; // M0 = 0 since lat0 = 0
    var M = M0 + y / k0;
    
    // Calculate footprint latitude
    var mu = M / (a * (1 - e2/4 - 3*e2*e2/64 - 5*e2*e2*e2/256));
    
    var e1_2 = e1 * e1;
    var e1_3 = e1_2 * e1;
    var e1_4 = e1_3 * e1;
    
    var fp = mu + (3*e1/2 - 27*e1_3/32) * Math.sin(2*mu) 
               + (21*e1_2/16 - 55*e1_4/32) * Math.sin(4*mu)
               + (151*e1_3/96) * Math.sin(6*mu)
               + (1097*e1_4/512) * Math.sin(8*mu);
    
    // Calculate radius of curvature
    var sin_fp = Math.sin(fp);
    var cos_fp = Math.cos(fp);
    var tan_fp = Math.tan(fp);
    var tan2_fp = tan_fp * tan_fp;
    var tan4_fp = tan2_fp * tan2_fp;
    
    var n1 = a / Math.sqrt(1 - e2 * sin_fp * sin_fp);
    var r1 = a * (1 - e2) / Math.pow(1 - e2 * sin_fp * sin_fp, 1.5);
    var d = x / (n1 * k0);
    var d2 = d * d;
    var d3 = d2 * d;
    var d4 = d3 * d;
    var d5 = d4 * d;
    var d6 = d5 * d;
    
    var c1 = e2 * cos_fp * cos_fp / (1 - e2);
    var c1_2 = c1 * c1;
    
    // Calculate latitude
    var lat = fp - (n1 * tan_fp / r1) * (d2/2 - (5 + 3*tan2_fp + 10*c1 - 4*c1_2 - 9*e2*cos_fp*cos_fp) * d4/24
              + (61 + 90*tan2_fp + 298*c1 + 45*tan4_fp - 252*e2*cos_fp*cos_fp - 3*c1_2) * d6/720);
    
    // Calculate longitude
    var lon = lon0 + (d - (1 + 2*tan2_fp + c1) * d3/6 
                   + (5 - 2*c1 + 28*tan2_fp - 3*c1_2 + 8*e2*cos_fp*cos_fp + 24*tan4_fp) * d5/120) / cos_fp;
    
    // Convert to degrees
    return {
        lat: lat * RAD_TO_DEG,
        lng: lon * RAD_TO_DEG
    };
}

// WGS84 to SWEREF99 18 00 - Built-in Mathematical Implementation
function wgs84ToSweref99(lat, lng) {
    // SWEREF99 18 00 parameters (EPSG:3011)
    var a = 6378137.0;              // Semi-major axis (GRS80)
    var f = 1 / 298.257222101;      // Flattening (GRS80)
    var lat0 = 0.0;                 // Latitude of natural origin (degrees)
    var lon0 = 18.0;                // Longitude of natural origin (degrees)
    var k0 = 1.0;                   // Scale factor at natural origin
    var x0 = 150000.0;              // False easting (meters)
    var y0 = 0.0;                   // False northing (meters)
    
    // Convert to radians
    var DEG_TO_RAD = Math.PI / 180.0;
    
    lat *= DEG_TO_RAD;
    lng *= DEG_TO_RAD;
    lat0 *= DEG_TO_RAD;
    lon0 *= DEG_TO_RAD;
    
    // Derived constants
    var b = a * (1 - f);           // Semi-minor axis
    var e2 = 2 * f - f * f;        // First eccentricity squared
    var e = Math.sqrt(e2);         // First eccentricity
    var n = (a - b) / (a + b);     // Third flattening
    
    // Calculate conformal latitude
    var e_sin_lat = e * Math.sin(lat);
    var q = Math.asinh(Math.tan(lat)) - e * Math.atanh(e_sin_lat);
    var beta = Math.atan(Math.sinh(q));
    
    // Alpha series coefficients for forward transformation
    var alpha1 = 0.5 * n - (2.0/3.0) * n * n * n + (5.0/16.0) * Math.pow(n, 5);
    var alpha2 = (13.0/48.0) * n * n - (3.0/5.0) * Math.pow(n, 4) + (557.0/1440.0) * Math.pow(n, 6);
    var alpha3 = (61.0/240.0) * Math.pow(n, 3) - (103.0/140.0) * Math.pow(n, 5);
    var alpha4 = (49561.0/161280.0) * Math.pow(n, 4);
    
    // Calculate complex coordinates
    var eta_prime = Math.atanh(Math.cos(beta) * Math.sin(lng - lon0));
    var xi_prime = beta;
    
    // Apply series transformations
    var xi = xi_prime;
    for (var j = 1; j <= 4; j++) {
        var alpha = [0, alpha1, alpha2, alpha3, alpha4][j];
        xi += alpha * Math.sin(2 * j * xi_prime) * Math.cosh(2 * j * eta_prime);
    }
    
    var eta = eta_prime;
    for (var j = 1; j <= 4; j++) {
        var alpha = [0, alpha1, alpha2, alpha3, alpha4][j];
        eta += alpha * Math.cos(2 * j * xi_prime) * Math.sinh(2 * j * eta_prime);
    }
    
    // Calculate final coordinates
    var x = x0 + k0 * a * eta;
    var y = y0 + k0 * a * xi;
    
    return {
        x: x,
        y: y
    };
}

// Gauss-Krüger (GK, Bessel, Potsdam) to WGS84 (Google)
function gk2geo(rw, hw) {
    // Easting (rw) and Northing (hw) in Potsdam Datum
    var ll = {};
    if (rw === "" || hw === "" || isNaN(rw) || isNaN(hw)) return ll;
    rw = parseFloat(rw);
    hw = parseFloat(hw);
    var a = 6377397.15508;
    var f = 3.34277321e-3;
    var pi = Math.PI;
    var c = a / (1 - f);
    var ex2 = (2 * f - f * f) / ((1 - f) * (1 - f));
    var ex4 = ex2 * ex2;
    var ex6 = ex4 * ex2;
    var ex8 = ex4 * ex4;
    var e0 = c * (pi / 180) * (1 - 3 * ex2 / 4 + 45 * ex4 / 64 - 175 * ex6 / 256 + 11025 * ex8 / 16384);
    var f2 = (180 / pi) * (3 * ex2 / 8 - 3 * ex4 / 16 + 213 * ex6 / 2048 - 255 * ex8 / 4096);
    var f4 = (180 / pi) * (21 * ex4 / 256 - 21 * ex6 / 256 + 533 * ex8 / 8192);
    var f6 = (180 / pi) * (151 * ex6 / 6144 - 453 * ex8 / 12288);
    var sigma = hw / e0;
    var sigmr = sigma * pi / 180;
    var bf = sigma + f2 * Math.sin(2 * sigmr) + f4 * Math.sin(4 * sigmr) + f6 * Math.sin(6 * sigmr);
    var br = bf * pi / 180;
    var tan1 = Math.tan(br);
    var tan2 = tan1 * tan1;
    var tan4 = tan2 * tan2;
    var cos1 = Math.cos(br);
    var cos2 = cos1 * cos1;
    var etasq = ex2 * cos2;
    var nd = c / Math.sqrt(1 + etasq);
    var nd2 = nd * nd;
    var nd4 = nd2 * nd2;
    var nd6 = nd4 * nd2;
    var nd3 = nd2 * nd;
    var nd5 = nd4 * nd;
    var kz = parseInt(rw / 1e6);
    var lh = kz * 3;
    var dy = rw - (kz * 1e6 + 500000);
    var dy2 = dy * dy;
    var dy4 = dy2 * dy2;
    var dy3 = dy2 * dy;
    var dy5 = dy4 * dy;
    var dy6 = dy3 * dy3;
    var b2 = -tan1 * (1 + etasq) / (2 * nd2);
    var b4 = tan1 * (5 + 3 * tan2 + 6 * etasq * (1 - tan2)) / (24 * nd4);
    var b6 = -tan1 * (61 + 90 * tan2 + 45 * tan4) / (720 * nd6);
    var l1 = 1 / (nd * cos1);
    var l3 = -(1 + 2 * tan2 + etasq) / (6 * nd3 * cos1);
    var l5 = (5 + 28 * tan2 + 24 * tan4) / (120 * nd5 * cos1);
    ll["lat"] = parseFloat(bf + (180 / pi) * (b2 * dy2 + b4 * dy4 + b6 * dy6));
    ll["lng"] = parseFloat(lh + (180 / pi) * (l1 * dy + l3 * dy3 + l5 * dy5));
    var llw = pot2wgs(ll["lng"], ll["lat"]);
    return llw;
}

// WGS84 (Google) to Gauss-Krüger (GK, Bessel, Potsdam)
function Dezimal2GK(lp, bp) {
    // Longitude (lp) and latitude (bp) in Potsdam Datum
    var gk = {};
    if (lp === "" || bp === "" || isNaN(lp) || isNaN(bp)) return gk;
    lp = parseFloat(lp);
    bp = parseFloat(bp);
    if (bp < 46 || bp > 56 || lp < 5 || lp > 16) {
        return gk;
    }
    var a = 6377397.15508;
    var f = 3.34277321e-3;
    var pi = Math.PI;
    var c = a / (1 - f);
    var ex2 = (2 * f - f * f) / ((1 - f) * (1 - f));
    var ex4 = ex2 * ex2;
    var ex6 = ex4 * ex2;
    var ex8 = ex4 * ex4;
    var e0 = c * (pi / 180) * (1 - 3 * ex2 / 4 + 45 * ex4 / 64 - 175 * ex6 / 256 + 11025 * ex8 / 16384);
    var e2 = c * (-3 * ex2 / 8 + 15 * ex4 / 32 - 525 * ex6 / 1024 + 2205 * ex8 / 4096);
    var e4 = c * (15 * ex4 / 256 - 105 * ex6 / 1024 + 2205 * ex8 / 16384);
    var e6 = c * (-35 * ex6 / 3072 + 315 * ex8 / 12288);
    var br = bp * pi / 180;
    var tan1 = Math.tan(br);
    var tan2 = tan1 * tan1;
    var tan4 = tan2 * tan2;
    var cos1 = Math.cos(br);
    var cos2 = cos1 * cos1;
    var cos4 = cos2 * cos2;
    var cos3 = cos2 * cos1;
    var cos5 = cos4 * cos1;
    var etasq = ex2 * cos2;
    var nd = c / Math.sqrt(1 + etasq);
    var g = e0 * bp + e2 * Math.sin(2 * br) + e4 * Math.sin(4 * br) + e6 * Math.sin(6 * br);
    var kz = parseInt((lp + 1.5) / 3);
    var lh = kz * 3;
    var dl = (lp - lh) * pi / 180;
    var dl2 = dl * dl;
    var dl4 = dl2 * dl2;
    var dl3 = dl2 * dl;
    var dl5 = dl4 * dl;
    var hw = g + nd * cos2 * tan1 * dl2 / 2 + nd * cos4 * tan1 * (5 - tan2 + 9 * etasq) * dl4 / 24;
    var rw = nd * cos1 * dl + nd * cos3 * (1 - tan2 + etasq) * dl3 / 6 + nd * cos5 * (5 - 18 * tan2 + tan4) * dl5 / 120 + kz * 1e6 + 500000;
    gk["h"] = hw.toFixed(3);
    gk["r"] = rw.toFixed(3);
    gk["z"] = rw.toString().charAt(0);
    return gk;
}

// Potsdam (Bessel) to WGS84 (Google) datum shift
function pot2wgs(lp, bp) {
    // Longitude (lp) and latitude (bp) in Potsdam Datum
    var ll = {};
    if (lp === "" || bp === "" || isNaN(lp) || isNaN(bp)) return ll;
    lp = parseFloat(lp);
    bp = parseFloat(bp);
    var a = 6378137.000 - 739.845;
    var fq = 3.35281066e-3 - 1.003748e-05;
    var f = 3.35281066e-3;
    var dx = 587;
    var dy = 16;
    var dz = 393;
    var e2q = (2 * fq - fq * fq);
    var e2 = (2 * f - f * f);
    var pi = Math.PI;
    var b1 = bp * (pi / 180);
    var l1 = lp * (pi / 180);
    var nd = a / Math.sqrt(1 - e2q * Math.sin(b1) * Math.sin(b1));
    var xp = nd * Math.cos(b1) * Math.cos(l1);
    var yp = nd * Math.cos(b1) * Math.sin(l1);
    var zp = (1 - e2q) * nd * Math.sin(b1);
    var x = xp + dx;
    var y = yp + dy;
    var z = zp + dz;
    var rb = Math.sqrt(x * x + y * y);
    var b2 = (180 / pi) * Math.atan((z / rb) / (1 - e2));
    var l2 = 0;
    if (x > 0)
        l2 = (180 / pi) * Math.atan(y / x);
    if (x < 0 && y > 0)
        l2 = (180 / pi) * Math.atan(y / x) + 180;
    if (x < 0 && y < 0)
        l2 = (180 / pi) * Math.atan(y / x) - 180;
    ll["lng"] = parseFloat(l2.toFixed(8));
    ll["lat"] = parseFloat(b2.toFixed(8));
    return ll;
}

// WGS84 (Google) to Potsdam (Bessel) datum shift (reverse)
function wgs2pot(lp, bp) {
    // Longitude (lp) and latitude (bp) in WGS84
    var ll = {};
    if (lp === "" || bp === "" || isNaN(lp) || isNaN(bp)) return ll;
    lp = parseFloat(lp);
    bp = parseFloat(bp);
    var a = 6378137.000 - 739.845;
    var fq = 3.35281066e-3 - 1.003748e-05;
    var f = 3.35281066e-3;
    var dx = -587;
    var dy = -16;
    var dz = -393;
    var e2q = (2 * fq - fq * fq);
    var e2 = (2 * f - f * f);
    var pi = Math.PI;
    var b1 = bp * (pi / 180);
    var l1 = lp * (pi / 180);
    var nd = a / Math.sqrt(1 - e2 * Math.sin(b1) * Math.sin(b1));
    var x = nd * Math.cos(b1) * Math.cos(l1);
    var y = nd * Math.cos(b1) * Math.sin(l1);
    var z = (1 - e2) * nd * Math.sin(b1);
    var xp = x + dx;
    var yp = y + dy;
    var zp = z + dz;
    var rb = Math.sqrt(xp * xp + yp * yp);
    var b2 = (180 / pi) * Math.atan((zp / rb) / (1 - e2q));
    var l2 = 0;
    if (xp > 0)
        l2 = (180 / pi) * Math.atan(yp / xp);
    if (xp < 0 && yp > 0)
        l2 = (180 / pi) * Math.atan(yp / xp) + 180;
    if (xp < 0 && yp < 0)
        l2 = (180 / pi) * Math.atan(yp / xp) - 180;
    ll["lng"] = parseFloat(l2.toFixed(8));
    ll["lat"] = parseFloat(b2.toFixed(8));
    return ll;
}
